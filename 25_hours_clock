<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>25 小时趣味时钟</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* 引入 Inter 字体 */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');
        
        /* 基础样式 */
        body {
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background-color: #f0f4f8; /* 浅灰色背景 */
            color: #1e293b;
            text-align: center;
        }

        .clock-container {
            background-color: #ffffff;
            padding: 40px 50px;
            border-radius: 16px; /* 圆角 */
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
            max-width: 90%;
            border: 1px solid #e2e8f0;
            transition: transform 0.3s ease-in-out;
        }

        .clock-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.15);
        }

        h1 {
            color: #10b981; /* 翠绿色 */
            margin-bottom: 20px;
            font-weight: 700;
            font-size: 2rem;
        }

        #superTime {
            font-size: 6rem;
            font-weight: 900;
            color: #3b82f6; /* 亮蓝色 */
            letter-spacing: 5px;
            margin-bottom: 20px;
            line-height: 1;
        }

        .explanation {
            font-size: 1.1rem;
            color: #64748b;
            margin-bottom: 30px;
            padding: 0 10px;
        }

        .footer-info {
            padding-top: 20px;
            border-top: 2px solid #f1f5f9;
        }

        .label {
            font-weight: 600;
            color: #475569;
            margin-right: 5px;
        }

        #normalTime {
            font-size: 1.8rem;
            color: #FFC72C ; /* 麦当劳黄 */
            font-weight: 600;
        }

        .note {
            font-size: 0.9rem;
            color: #94a3b8;
            margin-top: 10px;
        }

        /* 响应式调整 */
        @media (max-width: 600px) {
            .clock-container {
                padding: 30px 20px;
            }
            #superTime {
                font-size: 4rem;
            }
            #normalTime {
                font-size: 1.4rem;
            }
            h1 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="clock-container">
        <h1>“25 小时”超维时钟</h1>
        <!-- 超维时间显示区域 -->
        <div class="time-display" id="superTime">00:00:00</div>
        
        <p class="explanation">
            一天有 25 个小时的人生该当如何度过？
        </p>

        <div class="footer-info">
            <p>
                <!-- 动态显示用户本地时区 -->
                <span class="label" id="localTimeLabel">常规时间：</span>
                <span id="normalTime">00:00:00</span>
            </p>
            <p class="note">（日月逝矣，岁不我与）</p>
        </div>
    </div>

    <script>
        // 定义换算比例：常规秒数 * RATE = 超秒数
        // 比例常数为 25 / 24 ≈ 1.0416667
        const CONVERSION_RATE = 25 / 24; 
        
        /**
         * 初始化并显示用户的本地时区信息
         */
        function initializeTimeZoneDisplay() {
            const timeZoneElement = document.getElementById('localTimeLabel');
            try {
                // 使用 Intl API 获取更详细的时区名称，例如：Asia/Shanghai
                const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
                timeZoneElement.textContent = `常规时间（${timeZone}）：`;
            } catch (e) {
                // 如果浏览器不支持 Intl API 或发生错误，使用通用标签
                timeZoneElement.textContent = '常规当地时间：';
            }
        }

        /**
         * 将总秒数（超秒）转换为 HH:MM:SS 格式的字符串
         * @param {number} totalSeconds - 总超秒数
         * @returns {string} 格式化后的时间字符串 (超小时:超分钟:超秒)
         */
        function formatTime(totalSeconds) {
            // 1. 计算超小时数 (总秒数 / 3600)
            const hours = Math.floor(totalSeconds / 3600);
            
            // 2. 计算剩余秒数 (总秒数 % 3600)
            const remainingSeconds = totalSeconds % 3600;
            
            // 3. 计算超分钟数 (剩余秒数 / 60)
            const minutes = Math.floor(remainingSeconds / 60);
            
            // 4. 计算超秒数 (剩余秒数 % 60)
            const seconds = Math.floor(remainingSeconds % 60);

            // 对 25 取模，确保小时数在 00-24 之间（符合 25 小时制的显示）
            const h = String(hours % 25).padStart(2, '0'); 
            const m = String(minutes).padStart(2, '0');
            const s = String(seconds).padStart(2, '0');

            return `${h}:${m}:${s}`;
        }

        /**
         * 主要更新函数：计算和显示时间
         */
        function updateClock() {
            const now = new Date();
            
            // --- 1. 获取常规时间参数（精确到毫秒） ---
            const normalHours = now.getHours();
            const normalMinutes = now.getMinutes();
            const normalSeconds = now.getSeconds();
            const normalMilliseconds = now.getMilliseconds();
            
            // 将常规时间转换为从午夜开始的总秒数（包含毫秒，以提高精度和流畅度）
            const totalNormalSeconds = (normalHours * 3600) + (normalMinutes * 60) + normalSeconds + (normalMilliseconds / 1000);

            // --- 2. 计算超维时间 ---
            // 超维时间总秒数 = 常规时间总秒数 * 换算比例 (25/24)
            const totalSuperSeconds = totalNormalSeconds * CONVERSION_RATE;

            // --- 3. 更新显示 ---
            
            // A. 更新超维时钟
            document.getElementById('superTime').textContent = formatTime(totalSuperSeconds);
            
            // B. 更新常规时间显示（用于对比）
            const h = String(normalHours).padStart(2, '0');
            const m = String(normalMinutes).padStart(2, '0');
            const s = String(normalSeconds).padStart(2, '0');
            document.getElementById('normalTime').textContent = `${h}:${m}:${s}`;
        }

        // --- 初始化和动画控制 ---
        
        // 使用 requestAnimationFrame 确保动画更流畅
        let lastTimestamp = 0;
        const interval = 100; // 每 100 毫秒更新一次，使秒针更平滑

        function animate(timestamp) {
            if (timestamp - lastTimestamp > interval) {
                updateClock();
                lastTimestamp = timestamp;
            }
            requestAnimationFrame(animate);
        }

        // 首次运行时初始化时区显示并启动动画
        initializeTimeZoneDisplay();
        requestAnimationFrame(animate);
    </script>
</body>
</html>
